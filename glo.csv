"Term","Definition"
"**kwargs","To deal with an unknown number of keyword arguments in a function, use the * symbol before the parameter name"
"*args","To deal with an unknown number of arguments in a function"
"*args","To deal with an unknown number of arguments in a function, use the * symbol before the parameter name"
"abstract base class","Abstract base classes (ABCs) complement duck-typing by providing a way to define interfaces. They may introduce virtual subclasses—classes that don’t inherit directly but are still recognized by isinstance() and issubclass(). Python’s abc module lets you create custom ABCs, and many built-in ABCs exist (e.g. in collections.abc, numbers, io, importlib.abc)."
"Access Arrays","How to access array items"
"Access Arrays","How to access array items"
"Access Arrays","How to access array items"
"Access Dictionary Items","How to access items in a dictionary"
"Access Dictionary Items","How to access items in a dictionary"
"Access Dictionary Items","How to access items in a dictionary"
"Access List Items","How to access items in a list"
"Access List Items","How to access items in a list"
"Access List Items","How to access items in a list"
"Access Set Items","How to access items in a set"
"Access Set Items","How to access items in a set"
"Access Set Items","How to access items in a set"
"Access Tuple Items","How to access items in a tuple"
"Access Tuple Items","How to access items in a tuple"
"Access Tuple Items","How to access items in a tuple"
"Add Array Element","How to add elements from an array"
"Add Array Element","How to add elements from an array"
"Add Array Element","How to add elements to an array"
"Add Class Methods","How to add a method to a class"
"Add Class Methods","How to add a method to a class"
"Add Class Methods","How to add a method to a class"
"Add Class Properties","How to add a property to a class"
"Add Class Properties","How to add a property to a class"
"Add Class Properties","How to add a property to a class"
"Add Dictionary Item","How to add an item to a dictionary"
"Add Dictionary Item","How to add an item to a dictionary"
"Add List Items","How to add items to a list"
"Add List Items","How to add items to a list"
"Add Set Items","How to add items to a set"
"Add Set Items","How to add items to a set"
"Alias Modules (Renaming a Module)","How to rename a module"
"annotation","A label associated with a variable, class attribute, function parameter, or return value; used by convention as a type hint. Annotations for globals, class attributes, and functions are stored in the annotations attribute. See also variable and function annotations as detailed in PEP 484 and PEP 526."
"argument","A value passed to a function (or method) when calling it. There are two kinds: keyword arguments (passed with an identifier such as name=…) and positional arguments (passed by position, or using the unpacking operators * or **). The evaluated value is assigned to the corresponding local variable in the function body."
"Arithmetic Operators","Arithmetic operators are used to perform common mathematical operations"
"Arithmetic Operators","Arithmetic operators are used to perform common mathematical operations"
"Array","Lists can be used as Arrays"
"Array","Lists can be used as Arrays"
"Array Length","How to get the length of an array"
"Array Length","How to get the length of an array"
"Array Methods","Python has a set of Array/Lists methods"
"Array Methods","Python has a set of Array/Lists methods"
"Assign Values to Multiple Variables","How to assign values to multiple variables"
"Assign Values to Multiple Variables","How to assign values to multiple variables"
"Assigning a String to a Variable","How to assign a string value to a variable"
"Assigning a String to a Variable","How to assign a string value to a variable"
"Assignment Operators","Assignment operators are used to assign values to variables"
"Assignment Operators","Assignment operators are used to assign values to variables"
"asynchronous context manager","An object that controls the environment for an async with statement by defining aenter() and aexit() methods. Introduced by PEP 492, it is similar in concept to a synchronous context manager but works with asynchronous code."
"asynchronous generator","A function defined with async def that returns an asynchronous generator iterator. It contains yield expressions (and may include await, async for, and async with statements) so its values can be produced one at a time in an async for loop."
"asynchronous generator iterator","The iterator created by an asynchronous generator function. When anext() is called, it returns an awaitable that resumes the generator’s execution until the next yield expression is reached."
"asynchronous iterable","An object that can be used in an async for loop. It must implement aiter() that returns an asynchronous iterator. Introduced by PEP 492."
"asynchronous iterator","An object that implements both aiter() and anext(), where anext() returns an awaitable yielding successive items in the sequence. It is used in async for loops and raised StopAsyncIteration when exhausted."
"attribute","A value associated with an object and referenced by name (typically using the dot notation). Attributes may be added dynamically with functions like setattr(), though those with non-identifier names are not accessible through typical dot expressions."
"awaitable","An object that can be used in an await expression. This includes coroutine objects (created by async def functions) or objects that implement an await() method. See also PEP 492."
"BDFL","Acronym for “Benevolent Dictator For Life”—a title that has been associated with Guido van Rossum, the original creator of Python."
"binary file","A file object that reads and writes bytes-like objects. Examples include files opened in binary modes (e.g. 'rb', 'wb', etc.), sys.stdin.buffer, sys.stdout.buffer, and in-memory binary streams such as io.BytesIO."
"Bitwise Operators","Bitwise operators are used to compare (binary) numbers"
"Boolean Values","True or False"
"borrowed reference","In Python’s C API, a borrowed reference is a pointer to an object that the current code does not own. It risks becoming a dangling pointer if the object is destroyed. Converting a borrowed reference to a strong one is typically done via Py_INCREF() or Py_NewRef()."
"Built-In Data Types","Python has a set of built-in data types"
"Built-in Modules","How to import built-in modules"
"bytecode","The internal, compiled representation of Python source code for the CPython interpreter. Bytecode is stored in .pyc files to speed up subsequent executions and runs on the Python virtual machine. Note that bytecodes are not stable between Python releases."
"bytes-like object","Any object that supports the buffer protocol and can export a C-contiguous buffer. This includes built-in types like bytes, bytearray, and array.array, as well as many memoryview objects. They are used for operations that require binary data processing."
"Call a Function","How to call a function in Python"
"callable","Any object that can be called using parentheses with arguments (e.g. function calls). Functions, methods, and instances of classes that define a call() method are all considered callable."
"callback","A subroutine (usually a function) that is passed as an argument to another function to be executed at a later time or in response to an event."
"Camel Case","Camel Case Variable Names"
"Change Dictionary Item","How to change the value of a dictionary item"
"Change List Item","How to change the value of a list item"
"Change Tuple Item","How to change the value of a tuple item"
"Check if Dictionary Item Exists","How to check if a specified item is present in a dictionary"
"Check if List Item Exists","How to check if a specified item is present in a list"
"Check if Set Item Exists","How to check if a set item exists"
"Check if Tuple Item Exists","How to check if a specified item is present in a tuple"
"Check In String","How to check if a string contains a specified phrase"
"class","A blueprint for creating user-defined objects. Class definitions contain method definitions and attributes that operate on instances of the class."
"Class","A class is like an object constructor"
"Class pass Statement","Use the pass statement in empty classes"
"class variable","A variable defined within a class that is meant to be shared by all instances of the class. It is modified at the class level rather than on individual instances."
"closure variable","A free variable that is used in a nested (inner) function but is defined in the enclosing outer function. It can be declared nonlocal in order to allow modification of its value."
"Comments","Comments are code lines that will not be executed"
"Comparison Operators","Comparison operators are used to compare two values"
"Complex","The complex number type"
"complex number","A number expressed as a sum of a real part and an imaginary part. In Python, complex numbers are written with a j suffix for the imaginary part (e.g., 3+1j), and operations on complex numbers can be handled using the built-in complex support or the cmath module."
"context","A term with multiple meanings in Python. It may refer to the temporary state set by a context manager (via with) or the key–value bindings of a contextvars.Context object used in asynchronous environments."
"context management protocol","The pair of special methods enter() and exit() that an object must implement to be usable with the with statement. This protocol allows setup and teardown actions to be managed automatically."
"context manager","An object that implements the context management protocol (i.e. defines enter() and exit()) to precisely set up and tear down a runtime context when used in a with statement."
"context variable","A variable whose value depends on the current execution context (the contextvars.Context). They are primarily used to isolate state between concurrently executing tasks."
"contiguous","A property of a buffer that indicates the memory layout is unbroken—either C-contiguous (row-major order) or Fortran contiguous (column-major order). In one-dimensional arrays, this means the items are stored sequentially in order of increasing index."
"Convert into JSON","How to convert a Python object into JSON"
"Copy a List","How to copy a list"
"Copy Dictionary","How to copy a dictionary"
"coroutine","A generalized form of subroutine that can suspend and resume its execution. In Python, coroutines are implemented with async def and are used for asynchronous programming."
"coroutine function","A function defined with async def that returns a coroutine object. It may contain await expressions, and can be paused and resumed, which makes it distinct from a regular function."
"CPython","The canonical and reference implementation of Python, available from python.org. It is written in C and is the most widely used Python interpreter."
"Create a Child Class","How to create a child class"
"Create a Class","How to create a class"
"Create a Date Object","How to create a date object"
"Create a Module","How to create a module"
"Create an Iterator","How to create an iterator"
"Create Class","How to create a class"
"Create Parent Class","How to create a parent class"
"Create the init() Function","How to create the __init__() function"
"Creating Variables","Variables are containers for storing data values"
"current context","The context currently active (a contextvars.Context object) used by ContextVar objects to access their values. Each thread has its own current context, and asynchronous frameworks manage context per task."
"Date Format Codes","The datetime module has a set of legal format codes"
"Date Output","How to output a date"
"Datetime Module","How to work with dates in Python"
"decorator","A function (or a callable) that returns another function or method, used to modify or enhance the behavior of the target function. The decorator syntax (@) provides a readable and expressive shortcut for applying decorators."
"Default Parameter Value","How to use a default parameter value"
"Delete Object","How to delete an object"
"Delete Object Properties","How to modify properties of an object"
"descriptor","Any object that defines get(), set(), or delete() methods. When a class attribute is a descriptor, its special methods are invoked during attribute lookup, setting, or deletion. Descriptors underpin many Python features such as properties, methods, and static/class methods."
"Dictionary","A dictionary is an unordered, and changeable, collection"
"dictionary","An associative array (or hash table) that maps arbitrary keys to values. A dictionary’s keys must be hashable and are looked up via their hash() and eq() methods."
"dictionary comprehension","A compact syntax for creating dictionaries. Using an expression within curly braces with a for clause (and optionally an if clause), it generates key–value pairs for the dictionary."
"Dictionary Length","How to determine the length of a dictionary"
"dictionary view","The dynamic objects returned by dict.keys(), dict.values(), and dict.items(), which reflect changes to the underlying dictionary. They provide a “view” on the entries without creating a separate list copy unless explicitly converted."
"docstring","A literal string (placed as the first expression in a module, class, or function) that serves as the canonical documentation accessible via introspection on the doc attribute."
"duck-typing","A programming approach where an object’s suitability is determined by the presence of certain methods or attributes rather than the object’s type. The adage “if it looks like a duck and quacks like a duck, it must be a duck” summarizes this approach."
"EAFP","“Easier to Ask for Forgiveness than Permission”: a common coding style in Python that assumes valid keys or attributes exist and catches exceptions if they do not, as opposed to pre-checking with if statements (LBYL)."
"Elif","elif is the same as ""else if"" in other programming languages"
"Else","How to write an if...else statement"
"Escape Characters","How to use escape characters"
"Evaluate Booleans","Evaluate a value or statement and return either True or False"
"expression","A syntax construct that can be evaluated to a value. Unlike statements (which perform actions), expressions build up values and can be combined or composed into larger expressions."
"extension module","A module written in C or C++ that uses Python’s C API to interact with Python’s core and user code, typically providing performance-critical functionality."
"file object","An object that provides a file-oriented API to an underlying resource. Depending on its creation, it may be associated with an on-disk file, in-memory buffer, or other I/O devices. It provides methods such as read() and write()."
"file-like object","Synonymous with file object; any object that exposes a file-oriented API (like read and write methods) regardless of whether it represents a real file."
"filesystem encoding and error handler","The encoding used by Python to decode bytes from the operating system and encode Unicode for output. The file system encoding guarantees correct decoding for bytes below 128 and is available via sys.getfilesystemencoding()."
"finder","An object responsible for finding the loader for a module that is being imported. There are meta path finders (used via sys.meta_path) and path entry finders (used via sys.path_hooks)."
"Float","The floating number type"
"floor division","A mathematical operation that rounds the result of a division down to the nearest integer. In Python, it is implemented with the // operator. For example, 11 // 4 evaluates to 2."
"For","How to write a for loop"
"For Break","How to break a for loop"
"For Continue","How to stop the current iteration and continue with the next"
"For Else","How to use an else statement in a for loop"
"For pass","Use the pass keyword inside empty for loops"
"Format JSON","How to format JSON output with indentations and line breaks"
"Format String","How to combine two strings"
"free threading","A threading model where multiple threads can run Python bytecode simultaneously within the same interpreter, contrasting with the global interpreter lock which normally prevents concurrent execution of Python bytecode."
"free variable","Formally any variable used in a namespace that is not local to that namespace. In practice, it often refers to a closure variable (a free variable used in an enclosing scope)."
"f-string","A string literal prefixed with ‘f’ or ‘F’ that allows embedded Python expressions inside curly braces. They are also known as formatted string literals (PEP 498)."
"function","A block of code designed to perform a particular task. Functions accept zero or more arguments and return a value. They are defined using the def keyword, and include a body of statements."
"Function","How to create a function in Python"
"function annotation","An annotation associated with a function’s parameters or return value. Function annotations are usually used for type hints and can be accessed via the annotations attribute."
"Function Arguments","How to use arguments in a function"
"Function Recursion","Functions that can call itself is called recursive functions"
"Function Return Value","How to return a value from a function"
"future","A future statement, from future import <feature>, directs the compiler to compile the current module using syntax or semantics that will become standard in a future release of Python. The future module documents possible feature values and when a new feature was first added and when it will (or did) become the default."
"garbage collection","The automatic process of freeing memory when objects are no longer in use. Python primarily uses reference counting along with a cyclic garbage collector to reclaim memory from reference cycles."
"generator","A special type of function that contains one or more yield expressions. When called, it returns a generator iterator that produces a series of values (one per yield) and retains its execution state between yields."
"generator expression","A compact expression (similar to list and set comprehensions) that returns a generator iterator. It uses a syntax that resembles a regular expression followed by a for clause, optionally with conditions."
"generator iterator","The iterator object that is returned by a generator function. Each yield in the generator suspends and later resumes execution, preserving the generator’s state."
"generic function","A function composed of several implementations tailored for different argument types. The dispatch algorithm selects the proper implementation based on the type of a single argument, as seen with functools.singledispatch and PEP 443."
"generic type","A type that can be parameterized (for example, list or dict). Generic types are used for type hints and annotations and are described further in PEP 483, PEP 484, and PEP 585."
"GIL","Abbreviation for “global interpreter lock”. It is the mechanism in CPython that allows only one thread to execute Python bytecode at a time, simplifying memory management and object model concurrency."
"global interpreter lock","The lock used by the CPython interpreter to prevent multiple threads from executing Python bytecode simultaneously, ensuring thread safety of internal data structures. Some extension modules release the GIL during heavy computations or I/O operations."
"Global Keyword","The global keyword makes the variable global"
"Global Scope","When does a variable belong to the global scope?"
"Global Variables","Global variables are variables that belongs to the global scope"
"Handle Many Exceptions","How to handle more than one exception"
"hashable","An object is hashable if it has a hash value that remains constant during its lifetime and can be compared to other objects. This property is required for using objects as dictionary keys or set members."
"hash-based pyc","A pyc file (Python’s compiled bytecode) that uses the hash of the corresponding source file instead of the last-modified time to determine if the cache is valid."
"Identity Operators","Identity operators are used to see if two objects are in fact the same object"
"IDLE","The Integrated Development and Learning Environment provided with the standard Python distribution. It is both an editor and an interpreter environment designed primarily for beginners."
"If AND","Use the and keyword to combine if statements"
"immortal","An implementation detail of CPython where some objects (such as True and None) never have their reference counts modified and are never deallocated for the lifetime of the interpreter."
"immutable","An object whose value cannot be changed once it is created. Immutable objects include numbers, strings, and tuples. Any “change” creates a new object rather than modifying the original."
"import path","A list of locations (typically directories) searched by the path-based finder to locate modules during an import. This is usually obtained from sys.path, or in the case of subpackages, from the parent package’s path attribute."
"importer","An object that both finds and loads a module. It implements methods to locate a module (finding) and subsequently to load it (loading)."
"importing","The process of making the Python code in one module available to code in another module via the import mechanism."
"interactive","Describes Python’s interactive interpreter, which allows users to enter statements and expressions at a prompt with immediate execution and visible results—ideal for testing and exploration."
"interpreted","Describes Python as an interpreted language where source code is executed directly (typically via an intermediate bytecode) without requiring a separate compilation step into an executable file."
"interpreter shutdown","The phase when the Python interpreter is closing down. During shutdown, resources such as modules and internal objects are gradually released and garbage collection is performed. Code run during shutdown may encounter exceptions if resources have already been deallocated."
"iterable","An object capable of returning its members one at a time, typically by implementing an iter() method. Common examples include lists, strings, and dictionaries."
"iterator","An object representing a stream of data which implements the next() method to return successive items. Iterators are also iterable themselves since iter() returns the iterator object."
"key function","A callable that produces a sort key from an element. It is used with functions like sorted(), min(), and max() to control the order in which elements are compared or grouped (for example, str.lower() for case-insensitive sorting)."
"keyword argument","An argument that is passed to a function using an identifier (e.g. name=value) rather than by position. See also argument."
"lambda","An anonymous inline function defined with the lambda keyword. It consists of a single expression and returns its value when called."
"LBYL","Acronym for “Look Before You Leap” – a programming style that tests for preconditions explicitly before making a call or performing an operation, in contrast to the EAFP approach."
"lexical analyzer","The formal term for the tokenizer that processes Python source code into tokens (such as names, numbers, and symbols) for further compilation. See also token."
"list","A built-in Python sequence type that stores a mutable, ordered collection of items. Lists provide O(1) access by index and are similar to arrays in other languages."
"list comprehension","A concise syntax for creating lists from iterables. It uses a for clause (and optionally an if condition) inside square brackets to generate list elements in a compact expression."
"loader","An object whose responsibility is to load a module once its location has been determined. Loaders define methods such as exec_module() and create_module(), and are typically returned by finders."
"locale encoding","On Unix (the encoding of the LC_CTYPE locale) or Windows (the ANSI code page), this encoding is used by Python to decode input bytes and encode Unicode output. It can be retrieved or set via locale methods."
"Loop Dictionary Items","How to loop through the items in a dictionary"
"Loop List Items","How to loop through the items in a tuple"
"Loop Set Items","How to loop through the items in a set"
"Loop Through a range","How to loop through a range of values"
"Loop Through a String","How to loop through a string"
"Loop Through an Iterator","How to loop through the elements of an iterator"
"Loop Through List Items","How to loop through the items in a list"
"Looping Array Elements","How to loop through array elements"
"magic method","An informal term for special methods in Python that have names starting and ending with double underscores. These methods allow customization of operations like addition, attribute access, and more."
"mapping","A container object (e.g. dict) that supports arbitrary key lookups, typically defined by implementing the methods specified in collections.abc.Mapping or MutableMapping."
"Membership Operators","Membership operators are used to test if a sequence is present in an object"
"meta path finder","A finder, typically placed on sys.meta_path, which searches for modules to import using meta path hooks rather than file system paths. See also importlib.abc.MetaPathFinder."
"Metacharacters in RegEx","Metacharacters are characters with a special meaning"
"metaclass","The “class of a class” that defines how a class is constructed. Custom metaclasses can intercept and modify class creation, offering solutions for logging, attribute tracking, singletons, and more."
"method","A function defined within a class that, when accessed through an instance, automatically receives the instance as its first argument (usually named self)."
"method resolution order","(MRO) The order in which base classes are searched for a member during attribute lookup. It is determined by an algorithm that ensures consistent and predictable inheritance behavior."
"Modify Object Properties","How to modify properties of an object"
"module","An organizational unit of Python code that consists of a file (or several files) containing Python definitions and statements. Modules have a namespace and are loaded via the import mechanism."
"module spec","A namespace containing the metadata required for loading a module. Instances of module spec are created as part of the import process and contain import-related information."
"MRO","Abbreviation for Method Resolution Order. See “method resolution order.”"
"Multiline Comments","How to insert comments on multiple lines"
"Multiline Strings","How to create a multiline string"
"mutable","An object whose state or contents can be changed after it is created. Mutable types include lists and dictionaries (in contrast to immutable types like tuples or strings)."
"named tuple","A tuple subclass where elements can be accessed both by position (as in a regular tuple) and by name. Named tuples are often used to create lightweight objects with readable field names."
"namespace","A container where names (identifiers) are mapped to objects. In Python, namespaces are implemented as dictionaries (e.g., globals, locals, builtins) and help prevent naming conflicts."
"namespace package","A package that serves solely as a container for subpackages and lacks a physical representation (for example, no init.py file). They allow multiple separately installable packages to share a common parent."
"Negative Indexing on a String","How to use negative indexing when accessing a string"
"Nested Dictionaries","A dictionary within a dictionary"
"Nested If","How to write an if statement inside an if statement"
"Nested Loops","How to write a loop inside a loop"
"nested scope","The situation in which a function defined within another function can refer to variables from the enclosing (nonlocal) scope. In nested scopes, reading is allowed by default, but writing requires explicit declarations (nonlocal)."
"new-style class","The term formerly used to refer to classes defined in Python 2 that inherit from object. In modern Python versions all classes are “new-style” classes with support for descriptors, properties, slots, and more."
"Numbers","There are three numeric types in Python"
"object","The base type for all Python data types. Every Python object has an identity, type, and value, and the object type is the ultimate ancestor of all new-style classes."
"Object Methods","Methods in objects are functions that belong to the object"
"Operators","Use operators to perform operations in Python"
"optimized scope","A scope in which local variable names are statically known to the compiler, allowing the optimized read and write access to those variables. This applies to functions, generators, and comprehensions."
"Output Variables","Use the print statement to output variables"
"package","A Python module that can contain submodules or subpackages. Regular packages contain an init.py file, as opposed to namespace packages which do not."
"parameter","An identifier in a function or method definition that specifies a value (or values) the function may receive. Parameters come in several types including positional-only, keyword-only, var-positional, and var-keyword."
"Parse JSON","How to parse JSON code in Python"
"Pascal Case","Pascal Case Variable Names"
"Passing a List as an Argument","How to pass a list as an argument"
"path based finder","One of the default finders that searches an import path (a list such as sys.path) to locate modules during import."
"path entry","A single location (directory or other location) on the import path that is searched by the path-based finder when importing modules."
"path entry finder","A finder obtained from a callable on sys.path_hooks. It knows how to locate modules given a specific path entry."
"path entry hook","A callable on sys.path_hooks that returns a path entry finder if it can handle a specific path entry."
"path-like object","An object representing a file system path. It can be a str, bytes, or any object implementing the os.PathLike protocol, convertible to a file system path with os.fspath(). Introduced by PEP 519."
"PEP","Abbreviation for Python Enhancement Proposal—a design document that provides information or describes a new feature, process, or environment change in Python. (See also PEP 1.)"
"PIP Packages","How to download and install a package with PIP"
"PIP Remove Package","How to remove a package with PIP"
"portion","A set of files in a single directory (or in a zip file) that collectively contribute to a namespace package, as defined by PEP 420."
"positional argument","An argument passed to a function by position rather than by keyword. (See argument for further details.)"
"provisional API","An API that has been deliberately excluded from the guarantees of backward compatibility. Although it remains documented and testable, it may be changed in backward-incompatible ways if fundamental issues are found."
"provisional package","A package that is designated as provisional (related to provisional APIs) and is not covered by the usual backward compatibility guarantees."
"Python 3000","A nickname (or “Py3k”) for the Python 3.x release series, coined when the release was perceived as a major break from Python 2.x."
"Pythonic","An adjective describing code or ideas that follow Python’s idioms and design philosophies. Pythonic code favors readability, simplicity, and the use of built-in language features over more verbose or foreign constructs."
"qualified name","A dotted name that shows the path from a module’s global scope to the class, function, or method defined within it. For modules, it represents the full import path."
"raise","How to raise an exception in Python"
"Random Number","How to create a random number"
"reference count","The number of references to an object in memory. When an object’s reference count drops to zero, it is deallocated."
"RegEx Functions","The re module has a set of functions"
"RegEx Match Object","The Match Object is an object containing information about the search and the result"
"RegEx Module","How to import the regex module"
"RegEx Sets","A set is a set of characters inside a pair of square brackets with a special meaning"
"RegEx Special Sequences","A backslash followed by a character has a special meaning"
"regular package","A traditional Python package that is a directory containing an init.py file. See also namespace package."
"Remove Array Element","How to remove elements from an array"
"Remove Dictionary Items","How to remove dictionary items"
"Remove List Items","How to remove list items"
"Remove Set Items","How to remove set items"
"Remove Tuple Items","How to remove tuple items"
"Renaming a Module","How to rename a module"
"REPL","Acronym for “read–eval–print loop”, describing the interactive Python interpreter where expressions are read, evaluated, and their results printed immediately."
"Return Boolean Value","Functions that return a Boolean value"
"self","The self parameter refers to the current instance of the class"
"sequence","An iterable that supports efficient element access by integer indices (via getitem()) and has a defined length (via len()). Common sequence types include list, str, tuple, and bytes."
"Set","A set is an unordered, and unchangeable, collection"
"set comprehension","A concise syntax for creating sets. Enclosed in curly braces with a for clause (and optionally an if condition), it generates a set of elements much like list comprehensions create lists."
"Set Length","How to determine the length of a set"
"Setting Data Type","How to set the data type of an object"
"Shorthand If","How to write an if statement in one line"
"Shorthand If Else","How to write an if...else statement in one line"
"single dispatch","A form of generic function dispatch in which the implementation is chosen based solely on the type of one argument. See also generic function and functools.singledispatch."
"slice","An object that represents a portion of a sequence. It is created using colon-separated indices inside square brackets (e.g., a[1:3:5]) and is used internally to perform subscript operations."
"Slice a String","How to slice a string"
"slots","A declaration inside a class that saves memory by pre-declaring space for instance attributes and eliminating instance dictionaries. Though popular, it is best reserved for rare cases where many instances are created in memory-critical applications."
"Snake Case","Snake Case Variable Names"
"soft deprecated","Describes an API that is discouraged for use in new code but remains supported for existing code without emitting deprecation warnings. It is documented as deprecated but will not be immediately removed. (See PEP 387.)"
"Sort JSON","How to sort JSON"
"special method","A method that is invoked implicitly by Python for certain operations, such as arithmetic or attribute access. Special methods have names that begin and end with double underscores."
"Specify a Variable Type","How to specify a certain data type for a variable"
"statement","A single piece of code that performs an action (such as assignment or control flow). In contrast to expressions, which evaluate to values, statements are executed for their side effects."
"static type checker","An external tool that inspects Python code to verify types and detect potential type mismatches. They leverage type hints and annotations to perform these validations without executing the code."
"StopIteration","How to stop an iterator"
"String Concatenation","How to combine strings"
"String Length","How to get the length of a string"
"String Literals","How to create string literals"
"Strings are Arrays","Strings in Python are arrays of bytes representing Unicode characters"
"strong reference","In Python’s C API, a strong reference is one that the code owns and must later release with Py_DECREF() or similar methods. It contrasts with a borrowed reference, which does not imply ownership."
"super Function","The super() function makes the child class inherit the parent class"
"text encoding","The process or scheme by which a Unicode string is transformed into a sequence of bytes (encoding) and vice-versa (decoding). Common text encodings include UTF-8, ASCII, and others."
"text file","A file object that reads and writes string data (str objects). Although the underlying data might be binary, text files handle encoding and decoding automatically so that the programmer deals with Unicode strings."
"The Class __init__() Function","The __init__() function is executed when the class is initiated"
"The pass Keyword in If","Use the pass keyword inside empty if statements"
"The pass Statement in Functions","Use the pass statement in empty functions"
"token","A small, meaningful unit of source code produced by the lexical analyzer (tokenizer). Tokens include names, numbers, strings, operators, and newlines. The token module and tokenize module expose token details in Python."
"triple-quoted string","A string literal defined using three consecutive quotes (either single or double) that allows the string to span multiple lines and include unescaped quotes. It is widely used for multi-line docstrings."
"Try Else","How to use the else keyword in a try statement"
"Try Finally","How to use the finally keyword in a try statement"
"Tuple","A tuple is an ordered, and unchangeable, collection"
"Tuple Length","How to determine the length of a tuple"
"Tuple With One Item","How to create a tuple with only one item"
"type","A built-in function and attribute that returns the type of an object (i.e., what kind of object it is). Every object in Python has a type, which can be accessed through its class attribute or by calling type(obj)."
"type alias","A synonym for a type, created by assigning a type to an identifier. Type aliases improve code clarity, especially in type hints, by replacing complex type expressions with simpler names."
"Type Conversion","How to convert from one number type to another"
"type hint","An annotation that specifies the expected type for a variable, function parameter, or return value. Type hints are optional and used by static type checkers and IDEs for code completion and refactoring."
"universal newlines","A way of processing text files in which several newline conventions (Unix \n, Windows \r\n, and old Mac \r) are recognized and normalized. This allows cross-platform file handling without manual conversion."
"variable annotation","An annotation attached to a variable or class attribute that specifies its expected type. In class or global contexts, these annotations are stored in the annotations attribute, while local variable annotations are not available at runtime."
"Variable Names","How to name your variables"
"Variables in Modules","How to use variables in a module"
"virtual environment","A self-contained, isolated Python runtime environment that allows separate package installations without interfering with each other or with the system-wide Python installation. See also venv."
"virtual machine","In the context of Python, the virtual machine is the component that executes bytecode produced by the compiler. It is entirely implemented in software and abstracts away details of the underlying hardware."
"What is an Array","Arrays are variables that can hold more than one value"
"While","How to write a while loop"
"While Break","How to break a while loop"
"While Continue","How to stop the current iteration and continue with the next"
"While Else","How to use an else statement in a while loop"
"Why Use Lambda Functions","Learn when to use a lambda function or not"
"Zen of Python","A collection of aphorisms that capture the philosophy of Python, accessible by running “import this” in the interactive interpreter. It outlines design principles such as simplicity and readability."
